<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Recode.Api</name>
    </assembly>
    <members>
        <member name="M:Recode.Api.Controllers.CandidateController.GetAll(System.String,System.String,System.String,System.Int64,System.Int32,System.Int32)">
            <summary>
            Get All Candidates within company
            Filter by name
            paginated request with pageNo and pageSize
            </summary>
            <param name="name"></param>
            <param name="pageSize"></param>
            <param name="pageNo"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.CandidateController.GetCandidatesById(System.Int64)">
            <summary>
            Get Candidate by Id
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.CandidateController.Create(Microsoft.AspNetCore.Http.IFormFile,Recode.Core.Models.UpdateCandidateModel)">
            <summary>
            Create a new candidate
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.CandidateController.Update(Microsoft.AspNetCore.Http.IFormFile,Recode.Core.Models.CandidateModel)">
            <summary>
            Update an existing candidate 
            Be sure to pass the candidate Id
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.CandidateController.Delete(System.Int64)">
            <summary>
            Delete an existing candidate by Id
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.CompanyController.GetAll(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Get All Companies
            Filter by name and code
            paginated request with pageNo and pageSize
            </summary>
            <param name="name"></param>
            <param name="code"></param>
            <param name="pageSize"></param>
            <param name="pageNo"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.CompanyController.GetCompanysById(System.Int64)">
            <summary>
            Get Company by Id
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.CompanyController.Create(Recode.Core.Models.CompanyModel)">
            <summary>
            Create a new company
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.CompanyController.Update(Recode.Core.Models.CompanyModel)">
            <summary>
            Update an existing company 
            Be sure to pass the company Id
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.DepartmentController.GetAll(System.String,System.Int32,System.Int32)">
            <summary>
            Get All Departments within company
            Filter by name
            paginated request with pageNo and pageSize
            </summary>
            <param name="name"></param>
            <param name="pageSize"></param>
            <param name="pageNo"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.DepartmentController.GetDepartmentsById(System.Int64)">
            <summary>
            Get Department by Id
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.DepartmentController.Create(Recode.Core.Models.DepartmentModel)">
            <summary>
            Create a new department
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.DepartmentController.Update(Recode.Core.Models.DepartmentModel)">
            <summary>
            Update an existing department 
            Be sure to pass the department Id
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.DepartmentController.Delete(System.Int64)">
            <summary>
            Delete an existing department by Id
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.InterviewSessionController.GetAll(System.String,System.Int64,System.Int64,System.Int64,System.String,System.Int32,System.Int32)">
            <summary>
            Get All InterviewSessions within company
            Filter by name
            paginated request with pageNo and pageSize
            </summary>
            <param name="name"></param>
            <param name="pageSize"></param>
            <param name="pageNo"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.InterviewSessionController.SetInterviewCandidates(Recode.Core.Models.InterviewSessionVariable)">
            <summary>
            Set Interview Candidates
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.InterviewSessionController.SetInterviewMetrics(Recode.Core.Models.InterviewSessionVariable)">
            <summary>
            Set Interview Metrics
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.InterviewSessionController.SetInterviewInterviewers(Recode.Core.Models.InterviewSessionVariable)">
            <summary>
            Set Interview Interviwers
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.InterviewSessionController.GetInterviewSessionsById(System.Int64)">
            <summary>
            Get InterviewSession by Id
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.InterviewSessionController.Create(Recode.Core.Models.InterviewSessionModel)">
            <summary>
            Create a new interviewSession
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.InterviewSessionController.Update(Recode.Core.Models.InterviewSessionModel)">
            <summary>
            Update an existing interviewSession 
            Be sure to pass the interviewSession Id
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.JobRoleController.GetAll(System.String,System.Int64,System.Int32,System.Int32)">
            <summary>
            Get All Job Roles within company
            Filter by name and departmentId
            paginated request with pageNo and pageSize
            </summary>
            <param name="name"></param>
            <param name="departmentId"></param>
            <param name="pageSize"></param>
            <param name="pageNo"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.JobRoleController.GetJobRolesById(System.Int64)">
            <summary>
            Get JobRole by Id
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.JobRoleController.Create(Recode.Core.Models.UpdateJobRoleModel)">
            <summary>
            Create a new jobRole
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.JobRoleController.Update(Recode.Core.Models.UpdateJobRoleModel)">
            <summary>
            Update an existing jobRole 
            Be sure to pass the jobRole Id
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.MetricController.GetAll(System.String,System.Int32,System.Int32)">
            <summary>
            Get All Metrics within company
            Filter by name
            paginated request with pageNo and pageSize
            </summary>
            <param name="name"></param>
            <param name="pageSize"></param>
            <param name="pageNo"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.MetricController.GetMetricsById(System.Int64)">
            <summary>
            Get Metric by Id
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.MetricController.Create(Recode.Core.Models.MetricModel)">
            <summary>
            Create a new metric
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.MetricController.Update(Recode.Core.Models.MetricModel)">
            <summary>
            Update an existing metric 
            Be sure to pass the metric Id
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.MetricController.Delete(System.Int64)">
            <summary>
            Delete an existing metric by Id
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.OnboardController.Admin(Recode.Core.Models.OnboardUserModel)">
            <summary>
            Onboard a new vgg_admin. This endpoint should be called automatically from SSOUI.
            In the event that the callback wasn't received, do it manually
            Note that only one vgg_admin is expected to be on the platform
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.RolesController.Get">
            <summary>
            Get all roles on the application
            </summary>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.UserController.GetAll(System.String,System.String,System.String,System.String,System.Int64,System.Int32,System.Int32)">
            <summary>
            Get all users
            (vgg_admin) gets users in the database
            (CompanyAdmin, Recruiter, Interviewer) gets users within their company
            </summary>
            <param name="email"></param>
            <param name="firstName"></param>
            <param name="lastName"></param>
            <param name="userName"></param>
            <param name="pageSize"></param>
            <param name="pageNo"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.UserController.GetUsersByEmail(System.String)">
            <summary>
            Get users by email
            (vgg_admin) gets users in the database
            (CompanyAdmin, Recruiter, Interviewer) gets users within their company
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.UserController.GetUsersByIds(System.Int64[])">
            <summary>
            Get users by an array of Ids
            (vgg_admin) gets users in the database
            (CompanyAdmin, Recruiter, Interviewer) gets users within their company
            </summary>
            <param name="UserIds"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.UserController.GetUsersByRoleId(System.Int64)">
            <summary>
            Get users by roleId
            (vgg_admin) gets users in the database
            (CompanyAdmin, Recruiter, Interviewer) gets users within their company
            </summary>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.UserController.GetUsersById(System.Int64)">
            <summary>
            Get user by Id
            (vgg_admin) gets users in the database
            (CompanyAdmin, Recruiter, Interviewer) gets users within their company
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.UserController.GetUsersBySSOUserId(System.String)">
            <summary>
            Get users by SSO Id
            (vgg_admin) gets users in the database
            (CompanyAdmin, Recruiter, Interviewer) gets users within their company
            </summary>
            <param name="ssoUserId"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.UserController.ResendEmailConfirmation(System.Int64)">
            <summary>
            After User creation, if user does not receive confirmation email and EmailConfirmed = false
            Admin can call this endpoint to resend email confirmation mail
            </summary>
            <param name="UserId"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.UserController.ToggleActivateUser(System.Int64)">
            <summary>
            Toggle activate user.
            If user is active, he/she becomes inactive and vice versa
            (vgg_admin) for all users in the database
            (CompanyAdmin, Recruiter, Interviewer) for only users within their company
            </summary>
            <param name="UserId"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.UserController.Create(Recode.Core.Models.CreateUserModel)">
            <summary>
            Create a new user and assign he/she a role
            (vgg_admin) for all companies
            (CompanyAdmin, Recruiter, Interviewer) adds users to their company
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.UserController.Update(Recode.Core.Models.UserModel)">
            <summary>
            Update an existing user and assign he/she a role
            (vgg_admin) for all users in the database
            (CompanyAdmin, Recruiter, Interviewer) for only users within their company
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.UserController.AddUserRole(Recode.Core.Models.UserRoleModel)">
            <summary>
            Add role to a specific user
            (vgg_admin) for all users in the database
            (CompanyAdmin, Recruiter, Interviewer) for only users within their company
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.UserController.RemoveUserRole(Recode.Core.Models.UserRoleModel)">
            <summary>
            Remove role from a specific user
            (vgg_admin) for all users in the database
            (CompanyAdmin, Recruiter, Interviewer) for only users within their company
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.VenueController.GetAll(System.String,System.Int32,System.Int32)">
            <summary>
            Get All Venues within company
            Filter by name
            paginated request with pageNo and pageSize
            </summary>
            <param name="name"></param>
            <param name="pageSize"></param>
            <param name="pageNo"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.VenueController.GetAvailableVenues(System.DateTime,System.DateTime)">
            <summary>
            Get available venues by startDate and endDate
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.VenueController.GetVenuesById(System.Int64)">
            <summary>
            Get Venue by Id
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.VenueController.Create(Recode.Core.Models.VenueModel)">
            <summary>
            Create a new venue
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.VenueController.Update(Recode.Core.Models.VenueModel)">
            <summary>
            Update an existing venue 
            Be sure to pass the venue Id
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.Controllers.VenueController.Delete(System.Int64)">
            <summary>
            Delete an existing venue by Id
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Recode.Api.RequestModels.Model.Validate">
            <summary>
            Performs Validation
            </summary>
        </member>
        <member name="M:Recode.Api.RequestModels.Model.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Sets up rules for Validation
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
            // => new ValidationResult[0];
        </member>
    </members>
</doc>
